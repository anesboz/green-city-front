import axios from 'axios'

export function getTrees(clockWiseCoord) {
  const [north, east, south, west] = clockWiseCoord
  const str = `[out:json][timeout:100];(node["natural"="tree"](${south},${west},${north},${east}););out body;>;out skel qt;`
  const url = encodeURIComponent(str)
    .replaceAll('(', '%28')
    .replaceAll(')', '%29')
  return axios.get(`https://overpass-api.de/api/interpreter?data=${url}`)
}

export function getTemparature(point) {
  if (point == null) return Promise.reject()
  const [lat, lon] = point
  return axios.get(
    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=9b86ab1abc199eb71a493c270b55a52e&lang=fr`
  )
}

const DEFAULT_AROUND = 10

export function getTreesAround(center, around = DEFAULT_AROUND) {
  const [lat, log] = center
  const str = `[out:json][timeout:25];(node["natural"="tree"](around:${around},${lat},${log}););out body;>;out skel qt;`
  const url = encodeURIComponent(str)
    .replaceAll('(', '%28')
    .replaceAll(')', '%29')
  return axios.get(`https://overpass-api.de/api/interpreter?data=${url}`)
}

export function zoneToSquare(arrayOfPoints) {
  if (arrayOfPoints == null) return []
  const xs = []
  const ys = []

  arrayOfPoints.map(([x, y]) => {
    xs.push(x)
    ys.push(y)
  })

  return [Math.max(...xs), Math.max(...ys), Math.min(...xs), Math.min(...ys)]
}

export function zoneCenter(arrayOfPoints) {
  if (arrayOfPoints == null) return []
  const xs = []
  const ys = []

  arrayOfPoints.map(([x, y]) => {
    xs.push(x)
    ys.push(y)
  })

  return [
    (Math.max(...xs) + Math.min(...xs)) / 2,
    (Math.max(...ys) + Math.min(...ys)) / 2,
  ]
}

const test = [
  [48.86750443060333, 2.363828096062925],
  [48.86746799613759, 2.363889283103472],
  [48.86746439462841, 2.363895272057997],
  [48.86745794031929, 2.36390615161445],
  [48.86742562395425, 2.3639604108556],
  [48.86737182228858, 2.364050888403437],
  [48.867320900690295, 2.364136202212002],
  [48.86728527518643, 2.364196150694383],
  [48.867264504998545, 2.364231046057404],
  [48.8672538841255, 2.3642488892099323],
  [48.867231487510104, 2.364262374754115],
  [48.8671399217101, 2.364317526957068],
  [48.86703799037503, 2.364378833526726],
  [48.86694013469137, 2.364437745426764],
  [48.86691372487684, 2.36445371308141],
  [48.86685418348327, 2.364489529577707],
  [48.86683808273435, 2.364499215217103],
  [48.86683760311589, 2.364499503250018],
  [48.866808221039065, 2.364517178379751],
  [48.86676280301149, 2.364544549216028],
  [48.86654659693744, 2.364674522150413],
  [48.86644512599779, 2.364735520441731],
  [48.866419003427225, 2.364751225284849],
  [48.865329956101675, 2.365405891553086],
  [48.8646722169341, 2.36579983886103],
  [48.86461277310069, 2.365835492959615],
  [48.8646120424582, 2.3658359312425983],
  [48.86316992059441, 2.36670305103525],
  [48.8631391616644, 2.366717752493784],
  [48.863100129702765, 2.366735181191001],
  [48.8630601934936, 2.366751514017704],
  [48.86301900316817, 2.366765386678585],
  [48.86245701276737, 2.36690109293189],
  [48.86162755795482, 2.367101341265477],
  [48.86094919413815, 2.367265176116383],
  [48.860099860793426, 2.367465690980601],
  [48.85945764420397, 2.367619700062679],
  [48.857586669599335, 2.368068570468517],
  [48.85692403815294, 2.368227316713131],
  [48.856922280347035, 2.368227737367889],
  [48.85583080956414, 2.368479721902639],
  [48.85573412813671, 2.368512371393433],
  [48.856409028484, 2.364450234914046],
  [48.85645519560448, 2.364304435684525],
  [48.85690401549028, 2.362831467145263],
  [48.8572513762784, 2.361751317180405],
  [48.857691530018464, 2.360695193360699],
  [48.858323455910146, 2.359371873938854],
  [48.85835638148137, 2.359317521134786],
  [48.85869587068338, 2.35880795160968],
  [48.859021847967774, 2.358354799401486],
  [48.860065821054995, 2.3569033306054],
  [48.86008003786547, 2.3568623149031422],
  [48.86121763195601, 2.353472846175798],
  [48.86127277511488, 2.353340789425888],
  [48.86165053324886, 2.351652480206598],
  [48.86199119077518, 2.350156041756734],
  [48.86209499953653, 2.350214645870493],
  [48.86340330447355, 2.350947639855089],
  [48.86340592861751, 2.350949105218923],
  [48.8644258050741, 2.351518483670822],
  [48.865239674871255, 2.351974400952567],
  [48.86623248929979, 2.352530424441133],
  [48.86703206009141, 2.352975454399392],
  [48.86933005072561, 2.354260580416611],
  [48.8689649520664, 2.355851251424401],
  [48.86890277368019, 2.356122237429608],
  [48.868852637609784, 2.356376304637886],
  [48.8687118335507, 2.357276611233495],
  [48.86845538670618, 2.359012067001677],
  [48.868361640343835, 2.359661291615677],
  [48.86797347883055, 2.362346353900449],
  [48.86793726270754, 2.362609137875383],
  [48.867904657146255, 2.362835821366176],
  [48.86788818068916, 2.362950441105718],
  [48.86786700925894, 2.363097114419805],
  [48.86785349809154, 2.363191020358598],
  [48.867842872396096, 2.363264895211806],
  [48.86779437773357, 2.363341067763255],
  [48.86774714781237, 2.363420512806496],
  [48.86764809983902, 2.363586764002008],
  [48.86758323620126, 2.363695780881004],
  [48.86755155729217, 2.363748973379518],
  [48.86755085309052, 2.363750154346528],
  [48.86754446563982, 2.3637609199756833],
  [48.86754086413737, 2.363766908947874],
  [48.86750443060333, 2.363828096062925],
]
